AWSTemplateFormatVersion: '2010-09-09'
Description: Automatically start/stop ecs services outside of business hours
#====================================================================================================
#                                             Parameters
#====================================================================================================
Parameters:
  Codebucket:
    Type: String
    Description: The S3 Bucket where the python code for lambda is saved

  CodeKey:
    Type: String
    Description: The S3 object key
    Default: "lambda_function.zip"

  EcsFullPermissionRole:
    Type: String
    Description: ARN of the AWS managed IAM Role for ECS Full Access permissions e.g arn:aws:iam::aws:policy/AmazonECS_FullAccess
    Default: arn:aws:iam::aws:policy/AmazonECS_FullAccess

  ClusterName:
    Type: String
    Description: Name of the ECS Cluster
  
  ApiGatewayName:
    Type: String
    Default: ScalingECSServices
    
  ApiGatewayStageName:
    Type: String
    AllowedPattern: "[a-z0-9]+"
    Default: v1

  ApiGatewayHTTPMethod:
    Type: String
    Default: POST

#====================================================================================================
#                                             Resources
#====================================================================================================
Resources:

#====================================================================================================
#                                            API Gateway
#====================================================================================================
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: API Gateway to scale ECS services
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref ApiGatewayName

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties: 
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: scale-ecs-services
      RestApiId: !Ref ApiGateway

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: true
      AuthorizationType: NONE
      HttpMethod: !Ref ApiGatewayHTTPMethod
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt ScalingLambda.Arn
        IntegrationResponses:
          - StatusCode: "200"
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            application/json: 'Empty'
      ResourceId: !GetAtt ApiGatewayResource.ResourceId
      RestApiId: !Ref ApiGateway

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref ApiGatewayStageName
  
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
        - ApiGatewayDeployment
    Properties:
      Enabled: true
      StageKeys:
        - RestApiId: !Ref ApiGateway
          StageName: !Ref ApiGatewayStageName
      Name: Scale_ECS_Services_Key

  ApiGatewayUsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    DependsOn:
      - ApiGatewayDeployment
    Properties:
      ApiStages:
        - ApiId: !Ref ApiGateway
          Stage: !Ref ApiGatewayStageName
      Quota:
        Limit: 100
        Period: MONTH
      Throttle:
        BurstLimit: 1
        RateLimit: 1
      UsagePlanName: Scale_Services_Plan
  
  ApiGatewayUsagePlanKey:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    DependsOn:
      - ApiKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiGatewayUsagePlan

#====================================================================================================
#                                            Lambda
#====================================================================================================
  ScalingLambda:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref Codebucket
        S3Key: !Ref CodeKey
      Description: Sets all ECS services desired count to 0 or 1
      FunctionName: ScalingLambda
      Handler: 'lambda_function.lambda_handler'
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: 'python3.8'
      Timeout: 30
    DependsOn: LambdaRolePolicy

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ScalingLambda.Arn
      Principal: apigateway.amazonaws.com
      # note: if route *not* at API Gateway root, `SourceArn` would take the form of:
      #               arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/${ApiGatewayStageName}/${ApiGatewayHTTPMethod}/PATH_PART
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/${ApiGatewayHTTPMethod}/scale-ecs-services

  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: IAM Role for scaling Lambda
      ManagedPolicyArns:
        - !Ref EcsFullPermissionRole
      RoleName: ScalingLambdaIamRole

  LambdaRolePolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'ec2:CreateNetworkInterface'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DescribeNetworkInterfaces'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: '*'        
      PolicyName: ScalingLambdaIamPolicy
      Roles: 
        - !Ref LambdaIamRole
    DependsOn: LambdaIamRole

#====================================================================================================
#                                            Event Bridge
#====================================================================================================
  StartEcsServicesRuleCloudwatch:
    Type: AWS::Events::Rule
    Properties: 
      Description: Starts at 7am on workdays
      Name: StartEcsServicesRule
      ScheduleExpression: 'cron(0 21 ? * SUN-THU *)' # UTC time
      State: ENABLED
      Targets:  
        - Arn: !GetAtt ScalingLambda.Arn
          Input: !Sub '{"action": "start", "cluster": "${ClusterName}"}'
          Id: startLambda
    DependsOn: ScalingLambda

  StopEcsServicesRuleCloudwatch:
    Type: AWS::Events::Rule
    Properties: 
      Description: Stops at 10pm on workdays
      Name: StopEcsServicesRule
      ScheduleExpression: 'cron(0 12 ? * SUN-THU *)' # UTC time
      State: ENABLED
      Targets: 
        - Arn: !GetAtt ScalingLambda.Arn
          Input: !Sub '{"action": "stop", "cluster": "${ClusterName}"}'
          Id: stopLambda
    DependsOn: ScalingLambda

#====================================================================================================
#                                            Outputs
#====================================================================================================
Outputs:
  ApiGatewayInvokeURL:
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStageName}

  lambdaArn:
    Value: !GetAtt ScalingLambda.Arn